/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 514.0, "minX": 0.0, "maxY": 6693.0, "series": [{"data": [[0.0, 514.0], [0.1, 514.0], [0.2, 524.0], [0.3, 529.0], [0.4, 537.0], [0.5, 545.0], [0.6, 545.0], [0.7, 547.0], [0.8, 555.0], [0.9, 556.0], [1.0, 557.0], [1.1, 557.0], [1.2, 578.0], [1.3, 594.0], [1.4, 611.0], [1.5, 611.0], [1.6, 611.0], [1.7, 616.0], [1.8, 620.0], [1.9, 623.0], [2.0, 627.0], [2.1, 627.0], [2.2, 641.0], [2.3, 652.0], [2.4, 662.0], [2.5, 662.0], [2.6, 662.0], [2.7, 663.0], [2.8, 672.0], [2.9, 674.0], [3.0, 675.0], [3.1, 675.0], [3.2, 677.0], [3.3, 684.0], [3.4, 703.0], [3.5, 732.0], [3.6, 732.0], [3.7, 746.0], [3.8, 748.0], [3.9, 767.0], [4.0, 774.0], [4.1, 774.0], [4.2, 782.0], [4.3, 792.0], [4.4, 793.0], [4.5, 811.0], [4.6, 811.0], [4.7, 820.0], [4.8, 824.0], [4.9, 829.0], [5.0, 845.0], [5.1, 845.0], [5.2, 853.0], [5.3, 855.0], [5.4, 858.0], [5.5, 892.0], [5.6, 892.0], [5.7, 901.0], [5.8, 911.0], [5.9, 933.0], [6.0, 937.0], [6.1, 937.0], [6.2, 952.0], [6.3, 967.0], [6.4, 984.0], [6.5, 1011.0], [6.6, 1011.0], [6.7, 1019.0], [6.8, 1027.0], [6.9, 1050.0], [7.0, 1052.0], [7.1, 1052.0], [7.2, 1059.0], [7.3, 1062.0], [7.4, 1062.0], [7.5, 1065.0], [7.6, 1065.0], [7.7, 1068.0], [7.8, 1081.0], [7.9, 1095.0], [8.0, 1100.0], [8.1, 1100.0], [8.2, 1102.0], [8.3, 1108.0], [8.4, 1108.0], [8.5, 1108.0], [8.6, 1108.0], [8.7, 1133.0], [8.8, 1133.0], [8.9, 1136.0], [9.0, 1140.0], [9.1, 1140.0], [9.2, 1142.0], [9.3, 1143.0], [9.4, 1148.0], [9.5, 1161.0], [9.6, 1161.0], [9.7, 1162.0], [9.8, 1165.0], [9.9, 1166.0], [10.0, 1173.0], [10.1, 1173.0], [10.2, 1178.0], [10.3, 1183.0], [10.4, 1184.0], [10.5, 1184.0], [10.6, 1184.0], [10.7, 1184.0], [10.8, 1184.0], [10.9, 1191.0], [11.0, 1195.0], [11.1, 1195.0], [11.2, 1196.0], [11.3, 1196.0], [11.4, 1202.0], [11.5, 1204.0], [11.6, 1204.0], [11.7, 1206.0], [11.8, 1211.0], [11.9, 1214.0], [12.0, 1220.0], [12.1, 1220.0], [12.2, 1221.0], [12.3, 1222.0], [12.4, 1224.0], [12.5, 1224.0], [12.6, 1224.0], [12.7, 1225.0], [12.8, 1235.0], [12.9, 1236.0], [13.0, 1239.0], [13.1, 1239.0], [13.2, 1241.0], [13.3, 1243.0], [13.4, 1246.0], [13.5, 1248.0], [13.6, 1248.0], [13.7, 1251.0], [13.8, 1258.0], [13.9, 1260.0], [14.0, 1265.0], [14.1, 1265.0], [14.2, 1287.0], [14.3, 1289.0], [14.4, 1292.0], [14.5, 1297.0], [14.6, 1297.0], [14.7, 1300.0], [14.8, 1307.0], [14.9, 1308.0], [15.0, 1311.0], [15.1, 1311.0], [15.2, 1313.0], [15.3, 1316.0], [15.4, 1320.0], [15.5, 1326.0], [15.6, 1326.0], [15.7, 1329.0], [15.8, 1332.0], [15.9, 1333.0], [16.0, 1334.0], [16.1, 1334.0], [16.2, 1335.0], [16.3, 1337.0], [16.4, 1340.0], [16.5, 1342.0], [16.6, 1342.0], [16.7, 1345.0], [16.8, 1348.0], [16.9, 1353.0], [17.0, 1361.0], [17.1, 1361.0], [17.2, 1361.0], [17.3, 1361.0], [17.4, 1361.0], [17.5, 1364.0], [17.6, 1364.0], [17.7, 1365.0], [17.8, 1369.0], [17.9, 1376.0], [18.0, 1376.0], [18.1, 1376.0], [18.2, 1378.0], [18.3, 1389.0], [18.4, 1390.0], [18.5, 1393.0], [18.6, 1393.0], [18.7, 1394.0], [18.8, 1394.0], [18.9, 1402.0], [19.0, 1410.0], [19.1, 1410.0], [19.2, 1410.0], [19.3, 1410.0], [19.4, 1413.0], [19.5, 1420.0], [19.6, 1420.0], [19.7, 1423.0], [19.8, 1424.0], [19.9, 1430.0], [20.0, 1433.0], [20.1, 1433.0], [20.2, 1434.0], [20.3, 1438.0], [20.4, 1439.0], [20.5, 1441.0], [20.6, 1441.0], [20.7, 1442.0], [20.8, 1443.0], [20.9, 1444.0], [21.0, 1444.0], [21.1, 1444.0], [21.2, 1446.0], [21.3, 1453.0], [21.4, 1459.0], [21.5, 1466.0], [21.6, 1466.0], [21.7, 1477.0], [21.8, 1479.0], [21.9, 1482.0], [22.0, 1487.0], [22.1, 1487.0], [22.2, 1488.0], [22.3, 1489.0], [22.4, 1491.0], [22.5, 1494.0], [22.6, 1494.0], [22.7, 1495.0], [22.8, 1498.0], [22.9, 1501.0], [23.0, 1503.0], [23.1, 1503.0], [23.2, 1504.0], [23.3, 1505.0], [23.4, 1507.0], [23.5, 1512.0], [23.6, 1512.0], [23.7, 1513.0], [23.8, 1515.0], [23.9, 1518.0], [24.0, 1521.0], [24.1, 1521.0], [24.2, 1521.0], [24.3, 1527.0], [24.4, 1528.0], [24.5, 1529.0], [24.6, 1529.0], [24.7, 1530.0], [24.8, 1534.0], [24.9, 1536.0], [25.0, 1547.0], [25.1, 1547.0], [25.2, 1548.0], [25.3, 1551.0], [25.4, 1557.0], [25.5, 1558.0], [25.6, 1558.0], [25.7, 1559.0], [25.8, 1559.0], [25.9, 1563.0], [26.0, 1564.0], [26.1, 1564.0], [26.2, 1564.0], [26.3, 1567.0], [26.4, 1568.0], [26.5, 1568.0], [26.6, 1568.0], [26.7, 1571.0], [26.8, 1571.0], [26.9, 1575.0], [27.0, 1576.0], [27.1, 1576.0], [27.2, 1576.0], [27.3, 1577.0], [27.4, 1578.0], [27.5, 1579.0], [27.6, 1579.0], [27.7, 1579.0], [27.8, 1581.0], [27.9, 1583.0], [28.0, 1583.0], [28.1, 1583.0], [28.2, 1583.0], [28.3, 1586.0], [28.4, 1588.0], [28.5, 1590.0], [28.6, 1590.0], [28.7, 1591.0], [28.8, 1591.0], [28.9, 1599.0], [29.0, 1600.0], [29.1, 1600.0], [29.2, 1601.0], [29.3, 1604.0], [29.4, 1604.0], [29.5, 1605.0], [29.6, 1605.0], [29.7, 1605.0], [29.8, 1606.0], [29.9, 1609.0], [30.0, 1609.0], [30.1, 1609.0], [30.2, 1614.0], [30.3, 1615.0], [30.4, 1623.0], [30.5, 1624.0], [30.6, 1624.0], [30.7, 1626.0], [30.8, 1626.0], [30.9, 1627.0], [31.0, 1629.0], [31.1, 1629.0], [31.2, 1630.0], [31.3, 1631.0], [31.4, 1635.0], [31.5, 1636.0], [31.6, 1636.0], [31.7, 1638.0], [31.8, 1643.0], [31.9, 1644.0], [32.0, 1649.0], [32.1, 1649.0], [32.2, 1650.0], [32.3, 1653.0], [32.4, 1654.0], [32.5, 1655.0], [32.6, 1655.0], [32.7, 1659.0], [32.8, 1669.0], [32.9, 1670.0], [33.0, 1670.0], [33.1, 1670.0], [33.2, 1672.0], [33.3, 1675.0], [33.4, 1676.0], [33.5, 1676.0], [33.6, 1676.0], [33.7, 1678.0], [33.8, 1678.0], [33.9, 1678.0], [34.0, 1678.0], [34.1, 1678.0], [34.2, 1679.0], [34.3, 1681.0], [34.4, 1682.0], [34.5, 1683.0], [34.6, 1683.0], [34.7, 1690.0], [34.8, 1690.0], [34.9, 1690.0], [35.0, 1691.0], [35.1, 1691.0], [35.2, 1696.0], [35.3, 1697.0], [35.4, 1697.0], [35.5, 1699.0], [35.6, 1699.0], [35.7, 1699.0], [35.8, 1699.0], [35.9, 1700.0], [36.0, 1700.0], [36.1, 1700.0], [36.2, 1701.0], [36.3, 1703.0], [36.4, 1704.0], [36.5, 1707.0], [36.6, 1707.0], [36.7, 1710.0], [36.8, 1711.0], [36.9, 1712.0], [37.0, 1715.0], [37.1, 1715.0], [37.2, 1725.0], [37.3, 1729.0], [37.4, 1731.0], [37.5, 1735.0], [37.6, 1735.0], [37.7, 1738.0], [37.8, 1740.0], [37.9, 1741.0], [38.0, 1743.0], [38.1, 1743.0], [38.2, 1744.0], [38.3, 1746.0], [38.4, 1746.0], [38.5, 1749.0], [38.6, 1749.0], [38.7, 1749.0], [38.8, 1751.0], [38.9, 1751.0], [39.0, 1757.0], [39.1, 1757.0], [39.2, 1760.0], [39.3, 1760.0], [39.4, 1763.0], [39.5, 1764.0], [39.6, 1764.0], [39.7, 1764.0], [39.8, 1766.0], [39.9, 1768.0], [40.0, 1768.0], [40.1, 1768.0], [40.2, 1769.0], [40.3, 1769.0], [40.4, 1771.0], [40.5, 1774.0], [40.6, 1774.0], [40.7, 1780.0], [40.8, 1781.0], [40.9, 1783.0], [41.0, 1783.0], [41.1, 1783.0], [41.2, 1784.0], [41.3, 1788.0], [41.4, 1789.0], [41.5, 1789.0], [41.6, 1789.0], [41.7, 1792.0], [41.8, 1797.0], [41.9, 1799.0], [42.0, 1802.0], [42.1, 1802.0], [42.2, 1804.0], [42.3, 1805.0], [42.4, 1805.0], [42.5, 1806.0], [42.6, 1806.0], [42.7, 1808.0], [42.8, 1810.0], [42.9, 1811.0], [43.0, 1812.0], [43.1, 1812.0], [43.2, 1813.0], [43.3, 1815.0], [43.4, 1817.0], [43.5, 1817.0], [43.6, 1817.0], [43.7, 1817.0], [43.8, 1818.0], [43.9, 1819.0], [44.0, 1820.0], [44.1, 1820.0], [44.2, 1821.0], [44.3, 1821.0], [44.4, 1821.0], [44.5, 1822.0], [44.6, 1822.0], [44.7, 1827.0], [44.8, 1828.0], [44.9, 1829.0], [45.0, 1832.0], [45.1, 1832.0], [45.2, 1832.0], [45.3, 1833.0], [45.4, 1833.0], [45.5, 1833.0], [45.6, 1833.0], [45.7, 1834.0], [45.8, 1834.0], [45.9, 1835.0], [46.0, 1837.0], [46.1, 1837.0], [46.2, 1844.0], [46.3, 1845.0], [46.4, 1845.0], [46.5, 1848.0], [46.6, 1848.0], [46.7, 1848.0], [46.8, 1857.0], [46.9, 1858.0], [47.0, 1860.0], [47.1, 1860.0], [47.2, 1861.0], [47.3, 1862.0], [47.4, 1862.0], [47.5, 1863.0], [47.6, 1863.0], [47.7, 1864.0], [47.8, 1867.0], [47.9, 1868.0], [48.0, 1870.0], [48.1, 1870.0], [48.2, 1870.0], [48.3, 1871.0], [48.4, 1872.0], [48.5, 1873.0], [48.6, 1873.0], [48.7, 1875.0], [48.8, 1875.0], [48.9, 1878.0], [49.0, 1879.0], [49.1, 1879.0], [49.2, 1880.0], [49.3, 1882.0], [49.4, 1883.0], [49.5, 1885.0], [49.6, 1885.0], [49.7, 1886.0], [49.8, 1888.0], [49.9, 1889.0], [50.0, 1890.0], [50.1, 1890.0], [50.2, 1894.0], [50.3, 1896.0], [50.4, 1897.0], [50.5, 1902.0], [50.6, 1902.0], [50.7, 1902.0], [50.8, 1903.0], [50.9, 1905.0], [51.0, 1906.0], [51.1, 1906.0], [51.2, 1907.0], [51.3, 1908.0], [51.4, 1908.0], [51.5, 1910.0], [51.6, 1910.0], [51.7, 1913.0], [51.8, 1913.0], [51.9, 1914.0], [52.0, 1915.0], [52.1, 1915.0], [52.2, 1917.0], [52.3, 1918.0], [52.4, 1918.0], [52.5, 1919.0], [52.6, 1919.0], [52.7, 1921.0], [52.8, 1921.0], [52.9, 1922.0], [53.0, 1923.0], [53.1, 1923.0], [53.2, 1925.0], [53.3, 1925.0], [53.4, 1925.0], [53.5, 1925.0], [53.6, 1925.0], [53.7, 1925.0], [53.8, 1926.0], [53.9, 1928.0], [54.0, 1929.0], [54.1, 1929.0], [54.2, 1929.0], [54.3, 1930.0], [54.4, 1930.0], [54.5, 1931.0], [54.6, 1931.0], [54.7, 1931.0], [54.8, 1935.0], [54.9, 1935.0], [55.0, 1936.0], [55.1, 1936.0], [55.2, 1937.0], [55.3, 1938.0], [55.4, 1939.0], [55.5, 1939.0], [55.6, 1939.0], [55.7, 1941.0], [55.8, 1941.0], [55.9, 1943.0], [56.0, 1945.0], [56.1, 1945.0], [56.2, 1945.0], [56.3, 1946.0], [56.4, 1947.0], [56.5, 1949.0], [56.6, 1949.0], [56.7, 1949.0], [56.8, 1950.0], [56.9, 1953.0], [57.0, 1953.0], [57.1, 1953.0], [57.2, 1954.0], [57.3, 1956.0], [57.4, 1957.0], [57.5, 1957.0], [57.6, 1957.0], [57.7, 1957.0], [57.8, 1957.0], [57.9, 1960.0], [58.0, 1964.0], [58.1, 1964.0], [58.2, 1964.0], [58.3, 1966.0], [58.4, 1966.0], [58.5, 1966.0], [58.6, 1966.0], [58.7, 1967.0], [58.8, 1968.0], [58.9, 1969.0], [59.0, 1972.0], [59.1, 1972.0], [59.2, 1972.0], [59.3, 1973.0], [59.4, 1976.0], [59.5, 1978.0], [59.6, 1978.0], [59.7, 1984.0], [59.8, 1984.0], [59.9, 1985.0], [60.0, 1992.0], [60.1, 1992.0], [60.2, 1997.0], [60.3, 1998.0], [60.4, 1998.0], [60.5, 1999.0], [60.6, 1999.0], [60.7, 2001.0], [60.8, 2002.0], [60.9, 2002.0], [61.0, 2003.0], [61.1, 2003.0], [61.2, 2003.0], [61.3, 2007.0], [61.4, 2007.0], [61.5, 2008.0], [61.6, 2008.0], [61.7, 2009.0], [61.8, 2011.0], [61.9, 2011.0], [62.0, 2012.0], [62.1, 2012.0], [62.2, 2012.0], [62.3, 2013.0], [62.4, 2017.0], [62.5, 2018.0], [62.6, 2018.0], [62.7, 2020.0], [62.8, 2024.0], [62.9, 2025.0], [63.0, 2027.0], [63.1, 2027.0], [63.2, 2028.0], [63.3, 2030.0], [63.4, 2031.0], [63.5, 2031.0], [63.6, 2031.0], [63.7, 2032.0], [63.8, 2033.0], [63.9, 2033.0], [64.0, 2034.0], [64.1, 2034.0], [64.2, 2035.0], [64.3, 2046.0], [64.4, 2047.0], [64.5, 2047.0], [64.6, 2047.0], [64.7, 2049.0], [64.8, 2050.0], [64.9, 2054.0], [65.0, 2055.0], [65.1, 2055.0], [65.2, 2057.0], [65.3, 2059.0], [65.4, 2059.0], [65.5, 2061.0], [65.6, 2061.0], [65.7, 2062.0], [65.8, 2064.0], [65.9, 2065.0], [66.0, 2066.0], [66.1, 2066.0], [66.2, 2067.0], [66.3, 2067.0], [66.4, 2067.0], [66.5, 2068.0], [66.6, 2068.0], [66.7, 2068.0], [66.8, 2068.0], [66.9, 2070.0], [67.0, 2072.0], [67.1, 2072.0], [67.2, 2074.0], [67.3, 2076.0], [67.4, 2076.0], [67.5, 2078.0], [67.6, 2078.0], [67.7, 2080.0], [67.8, 2084.0], [67.9, 2088.0], [68.0, 2091.0], [68.1, 2091.0], [68.2, 2095.0], [68.3, 2096.0], [68.4, 2098.0], [68.5, 2098.0], [68.6, 2098.0], [68.7, 2099.0], [68.8, 2100.0], [68.9, 2107.0], [69.0, 2108.0], [69.1, 2108.0], [69.2, 2109.0], [69.3, 2112.0], [69.4, 2112.0], [69.5, 2113.0], [69.6, 2113.0], [69.7, 2114.0], [69.8, 2116.0], [69.9, 2118.0], [70.0, 2118.0], [70.1, 2118.0], [70.2, 2121.0], [70.3, 2122.0], [70.4, 2123.0], [70.5, 2125.0], [70.6, 2125.0], [70.7, 2125.0], [70.8, 2126.0], [70.9, 2128.0], [71.0, 2129.0], [71.1, 2129.0], [71.2, 2145.0], [71.3, 2148.0], [71.4, 2153.0], [71.5, 2157.0], [71.6, 2157.0], [71.7, 2165.0], [71.8, 2166.0], [71.9, 2171.0], [72.0, 2171.0], [72.1, 2171.0], [72.2, 2180.0], [72.3, 2190.0], [72.4, 2192.0], [72.5, 2193.0], [72.6, 2193.0], [72.7, 2201.0], [72.8, 2204.0], [72.9, 2205.0], [73.0, 2206.0], [73.1, 2206.0], [73.2, 2206.0], [73.3, 2208.0], [73.4, 2208.0], [73.5, 2211.0], [73.6, 2211.0], [73.7, 2213.0], [73.8, 2219.0], [73.9, 2222.0], [74.0, 2223.0], [74.1, 2223.0], [74.2, 2227.0], [74.3, 2229.0], [74.4, 2229.0], [74.5, 2230.0], [74.6, 2230.0], [74.7, 2231.0], [74.8, 2232.0], [74.9, 2233.0], [75.0, 2233.0], [75.1, 2233.0], [75.2, 2236.0], [75.3, 2237.0], [75.4, 2242.0], [75.5, 2243.0], [75.6, 2243.0], [75.7, 2247.0], [75.8, 2251.0], [75.9, 2255.0], [76.0, 2255.0], [76.1, 2255.0], [76.2, 2256.0], [76.3, 2259.0], [76.4, 2262.0], [76.5, 2268.0], [76.6, 2268.0], [76.7, 2272.0], [76.8, 2274.0], [76.9, 2277.0], [77.0, 2279.0], [77.1, 2279.0], [77.2, 2279.0], [77.3, 2282.0], [77.4, 2287.0], [77.5, 2293.0], [77.6, 2293.0], [77.7, 2301.0], [77.8, 2304.0], [77.9, 2307.0], [78.0, 2319.0], [78.1, 2319.0], [78.2, 2322.0], [78.3, 2325.0], [78.4, 2326.0], [78.5, 2326.0], [78.6, 2326.0], [78.7, 2326.0], [78.8, 2329.0], [78.9, 2331.0], [79.0, 2337.0], [79.1, 2337.0], [79.2, 2337.0], [79.3, 2337.0], [79.4, 2339.0], [79.5, 2341.0], [79.6, 2341.0], [79.7, 2344.0], [79.8, 2349.0], [79.9, 2351.0], [80.0, 2356.0], [80.1, 2356.0], [80.2, 2363.0], [80.3, 2374.0], [80.4, 2379.0], [80.5, 2381.0], [80.6, 2381.0], [80.7, 2381.0], [80.8, 2383.0], [80.9, 2386.0], [81.0, 2390.0], [81.1, 2390.0], [81.2, 2394.0], [81.3, 2400.0], [81.4, 2405.0], [81.5, 2413.0], [81.6, 2413.0], [81.7, 2418.0], [81.8, 2425.0], [81.9, 2429.0], [82.0, 2432.0], [82.1, 2432.0], [82.2, 2438.0], [82.3, 2440.0], [82.4, 2446.0], [82.5, 2452.0], [82.6, 2452.0], [82.7, 2452.0], [82.8, 2456.0], [82.9, 2463.0], [83.0, 2473.0], [83.1, 2473.0], [83.2, 2476.0], [83.3, 2490.0], [83.4, 2492.0], [83.5, 2492.0], [83.6, 2492.0], [83.7, 2502.0], [83.8, 2507.0], [83.9, 2509.0], [84.0, 2513.0], [84.1, 2513.0], [84.2, 2514.0], [84.3, 2517.0], [84.4, 2528.0], [84.5, 2535.0], [84.6, 2535.0], [84.7, 2537.0], [84.8, 2538.0], [84.9, 2539.0], [85.0, 2562.0], [85.1, 2562.0], [85.2, 2576.0], [85.3, 2586.0], [85.4, 2589.0], [85.5, 2590.0], [85.6, 2590.0], [85.7, 2590.0], [85.8, 2598.0], [85.9, 2604.0], [86.0, 2604.0], [86.1, 2604.0], [86.2, 2605.0], [86.3, 2607.0], [86.4, 2614.0], [86.5, 2619.0], [86.6, 2619.0], [86.7, 2638.0], [86.8, 2677.0], [86.9, 2682.0], [87.0, 2703.0], [87.1, 2703.0], [87.2, 2719.0], [87.3, 2776.0], [87.4, 2777.0], [87.5, 2786.0], [87.6, 2786.0], [87.7, 2797.0], [87.8, 2801.0], [87.9, 2803.0], [88.0, 2808.0], [88.1, 2808.0], [88.2, 2815.0], [88.3, 2833.0], [88.4, 2865.0], [88.5, 2892.0], [88.6, 2892.0], [88.7, 2897.0], [88.8, 2904.0], [88.9, 2918.0], [89.0, 2918.0], [89.1, 2918.0], [89.2, 2927.0], [89.3, 2930.0], [89.4, 2931.0], [89.5, 2932.0], [89.6, 2932.0], [89.7, 2932.0], [89.8, 2945.0], [89.9, 2954.0], [90.0, 2957.0], [90.1, 2957.0], [90.2, 2961.0], [90.3, 2962.0], [90.4, 2967.0], [90.5, 2974.0], [90.6, 2974.0], [90.7, 2986.0], [90.8, 2997.0], [90.9, 3000.0], [91.0, 3006.0], [91.1, 3006.0], [91.2, 3008.0], [91.3, 3022.0], [91.4, 3028.0], [91.5, 3053.0], [91.6, 3053.0], [91.7, 3077.0], [91.8, 3083.0], [91.9, 3085.0], [92.0, 3100.0], [92.1, 3100.0], [92.2, 3101.0], [92.3, 3106.0], [92.4, 3119.0], [92.5, 3127.0], [92.6, 3127.0], [92.7, 3131.0], [92.8, 3147.0], [92.9, 3155.0], [93.0, 3156.0], [93.1, 3156.0], [93.2, 3157.0], [93.3, 3173.0], [93.4, 3177.0], [93.5, 3184.0], [93.6, 3184.0], [93.7, 3186.0], [93.8, 3186.0], [93.9, 3192.0], [94.0, 3237.0], [94.1, 3237.0], [94.2, 3240.0], [94.3, 3248.0], [94.4, 3248.0], [94.5, 3251.0], [94.6, 3251.0], [94.7, 3251.0], [94.8, 3252.0], [94.9, 3256.0], [95.0, 3256.0], [95.1, 3256.0], [95.2, 3258.0], [95.3, 3263.0], [95.4, 3272.0], [95.5, 3276.0], [95.6, 3276.0], [95.7, 3277.0], [95.8, 3279.0], [95.9, 3284.0], [96.0, 3285.0], [96.1, 3285.0], [96.2, 3287.0], [96.3, 3287.0], [96.4, 3299.0], [96.5, 3299.0], [96.6, 3299.0], [96.7, 3299.0], [96.8, 3302.0], [96.9, 3312.0], [97.0, 3367.0], [97.1, 3367.0], [97.2, 3374.0], [97.3, 3395.0], [97.4, 3446.0], [97.5, 3501.0], [97.6, 3501.0], [97.7, 3546.0], [97.8, 3574.0], [97.9, 3585.0], [98.0, 3611.0], [98.1, 3611.0], [98.2, 3703.0], [98.3, 3951.0], [98.4, 4110.0], [98.5, 4197.0], [98.6, 4197.0], [98.7, 4335.0], [98.8, 4348.0], [98.9, 4369.0], [99.0, 4382.0], [99.1, 4382.0], [99.2, 4590.0], [99.3, 4593.0], [99.4, 4688.0], [99.5, 4721.0], [99.6, 4721.0], [99.7, 4859.0], [99.8, 5088.0], [99.9, 6693.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 81.0, "series": [{"data": [[600.0, 16.0], [700.0, 9.0], [800.0, 9.0], [900.0, 7.0], [1000.0, 12.0], [1100.0, 27.0], [1200.0, 26.0], [1300.0, 34.0], [1400.0, 32.0], [1500.0, 49.0], [1600.0, 55.0], [1700.0, 49.0], [1800.0, 68.0], [1900.0, 81.0], [2000.0, 65.0], [2100.0, 31.0], [2200.0, 40.0], [2300.0, 29.0], [2400.0, 19.0], [2500.0, 18.0], [2600.0, 9.0], [2700.0, 6.0], [2800.0, 8.0], [2900.0, 17.0], [3000.0, 9.0], [3100.0, 16.0], [3200.0, 22.0], [3300.0, 5.0], [3400.0, 1.0], [3500.0, 4.0], [3700.0, 1.0], [3600.0, 1.0], [3900.0, 1.0], [4100.0, 2.0], [4300.0, 4.0], [4500.0, 2.0], [4600.0, 1.0], [4700.0, 1.0], [4800.0, 1.0], [5000.0, 1.0], [6600.0, 1.0], [500.0, 11.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 183.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 617.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 183.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 617.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 201.7974999999998, "minX": 1.65943938E12, "maxY": 201.7974999999998, "series": [{"data": [[1.65943938E12, 201.7974999999998]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65943938E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 698.75, "minX": 1.0, "maxY": 6693.0, "series": [{"data": [[2.0, 2590.0], [3.0, 3611.0], [4.0, 2208.0], [5.0, 6693.0], [6.0, 2057.0], [7.0, 3585.0], [9.0, 1806.5], [15.0, 2424.0], [16.0, 2337.0], [19.0, 2149.6666666666665], [20.0, 1712.0], [22.0, 1850.5], [24.0, 1867.0], [25.0, 2028.0], [27.0, 1850.0], [28.0, 2074.0], [31.0, 2704.6666666666665], [33.0, 1586.5], [34.0, 1601.0], [36.0, 2037.0], [41.0, 1847.6], [43.0, 1873.0], [42.0, 1614.0], [45.0, 2067.0], [44.0, 2066.0], [47.0, 2016.0], [49.0, 1571.0], [48.0, 1583.0], [53.0, 2065.0], [52.0, 1869.3333333333333], [54.0, 1424.0], [57.0, 1872.6666666666667], [61.0, 2786.0], [60.0, 2482.4], [63.0, 1011.0], [62.0, 1268.0], [67.0, 2104.2], [66.0, 1579.0], [65.0, 1413.0], [64.0, 1814.0], [71.0, 1525.4], [69.0, 1300.0], [74.0, 1404.875], [73.0, 2379.5], [75.0, 1064.3333333333333], [72.0, 2713.5], [77.0, 1781.2857142857142], [76.0, 698.75], [79.0, 1791.0], [83.0, 2258.3333333333335], [82.0, 3177.0], [81.0, 1352.5], [80.0, 1563.0], [87.0, 3287.0], [86.0, 1518.0], [85.0, 2031.0], [84.0, 2109.0], [91.0, 2207.6250000000005], [89.0, 1945.0], [88.0, 1667.5], [95.0, 3277.0], [94.0, 2489.5], [93.0, 1822.25], [92.0, 2444.5], [96.0, 1462.6666666666667], [99.0, 1505.6666666666667], [103.0, 1954.0], [102.0, 1456.0], [100.0, 1935.0], [107.0, 722.0], [105.0, 2035.9999999999998], [104.0, 2536.6666666666665], [106.0, 1373.5], [111.0, 2524.6666666666665], [109.0, 2673.5], [110.0, 1337.0], [108.0, 1424.0], [114.0, 1135.3333333333333], [115.0, 1935.0], [112.0, 1342.0], [118.0, 2212.4], [116.0, 3127.75], [119.0, 1365.0], [123.0, 2627.6666666666665], [121.0, 1566.4], [122.0, 1906.0], [126.0, 1411.0], [125.0, 2563.0], [124.0, 2588.5], [127.0, 2007.0], [134.0, 2543.3333333333335], [133.0, 2079.4], [135.0, 2518.3333333333335], [132.0, 3131.0], [131.0, 2741.0], [129.0, 2547.5], [130.0, 1449.5], [128.0, 2650.5], [143.0, 2689.0], [142.0, 2951.0], [140.0, 2379.5], [139.0, 2173.2], [138.0, 2084.8333333333335], [136.0, 2978.75], [141.0, 2251.8], [137.0, 2688.875], [151.0, 1349.5], [149.0, 2550.3333333333335], [147.0, 1778.75], [146.0, 1894.0], [145.0, 2410.5], [144.0, 2108.5], [150.0, 1986.5], [148.0, 2088.0], [159.0, 1836.6666666666667], [158.0, 2123.3333333333335], [157.0, 2321.5], [156.0, 1865.3333333333333], [154.0, 2302.5], [153.0, 1906.75], [155.0, 1848.0], [152.0, 1326.0], [165.0, 2535.0], [164.0, 2122.3333333333335], [163.0, 2320.0], [162.0, 2270.0], [167.0, 2034.75], [166.0, 2019.6666666666667], [161.0, 2071.0], [160.0, 2058.5], [175.0, 2320.6666666666665], [173.0, 2105.0], [172.0, 2295.3333333333335], [171.0, 1764.0], [170.0, 1625.3333333333333], [169.0, 2059.0], [168.0, 1919.5], [174.0, 1969.0], [181.0, 1837.0], [180.0, 1850.75], [179.0, 1507.0], [178.0, 1591.3333333333333], [177.0, 2255.6666666666665], [183.0, 2609.6666666666665], [182.0, 1690.0], [176.0, 1239.0], [185.0, 1068.0], [184.0, 1212.5], [190.0, 1225.0], [189.0, 1921.0], [188.0, 1588.0], [186.0, 1158.0], [199.0, 1760.6666666666667], [196.0, 1723.0], [194.0, 1807.0], [192.0, 1175.0], [204.0, 2153.0], [203.0, 1728.6666666666667], [200.0, 1792.0], [213.0, 1953.0], [215.0, 1190.0], [211.0, 1465.5], [209.0, 1699.0], [208.0, 1472.0], [223.0, 1143.0], [222.0, 1865.346153846154], [220.0, 1879.0], [219.0, 2075.0], [218.0, 2024.3333333333333], [217.0, 1430.0], [221.0, 1821.0], [216.0, 1789.0], [231.0, 1499.5], [226.0, 1611.5], [225.0, 1773.0], [224.0, 1924.7499999999998], [230.0, 1627.0], [229.0, 1604.0], [228.0, 1810.0], [227.0, 1457.0], [239.0, 2047.285714285714], [238.0, 1932.0], [237.0, 1730.0], [235.0, 1630.0], [234.0, 1635.0], [233.0, 1643.0], [232.0, 1586.0], [245.0, 1634.0], [244.0, 2163.2], [243.0, 1806.0], [247.0, 1521.0], [246.0, 1534.0], [242.0, 1629.0], [241.0, 1615.0], [240.0, 1559.0], [255.0, 1992.3333333333333], [254.0, 1561.5], [250.0, 1804.0], [249.0, 1821.0], [248.0, 1956.111111111111], [252.0, 4688.0], [251.0, 1571.0], [268.0, 2097.3333333333335], [270.0, 1969.0], [271.0, 1952.6666666666667], [269.0, 2193.0], [266.0, 1887.6], [267.0, 1829.0], [264.0, 2255.0], [263.0, 2104.0], [262.0, 2086.0], [261.0, 2001.0], [259.0, 1935.0], [258.0, 1820.0], [256.0, 1742.3333333333333], [257.0, 1678.0], [286.0, 1817.3333333333333], [285.0, 1757.0], [275.0, 1817.0], [274.0, 1763.0], [283.0, 1563.0], [281.0, 1898.0], [280.0, 1454.0], [279.0, 1724.5], [278.0, 1918.0], [277.0, 952.0], [276.0, 2112.0], [303.0, 1659.0], [299.0, 1593.0000000000002], [298.0, 1564.0], [297.0, 1759.5], [296.0, 1697.5], [295.0, 1577.0], [294.0, 1558.0], [293.0, 1918.0], [292.0, 1881.6666666666667], [289.0, 1734.6666666666667], [288.0, 1396.3333333333333], [302.0, 2042.0], [300.0, 1747.5], [319.0, 1718.5], [315.0, 1722.0], [313.0, 1626.0], [312.0, 1623.0], [311.0, 1926.0], [310.0, 2190.0], [309.0, 1774.0], [308.0, 1745.6666666666667], [305.0, 2030.0], [334.0, 1897.0], [333.0, 1894.0], [331.0, 3578.0], [329.0, 1431.5], [327.0, 1610.3333333333333], [324.0, 1996.25], [320.0, 1902.0], [350.0, 1679.8], [351.0, 1718.6], [349.0, 1472.5], [348.0, 1142.0], [347.0, 1108.0], [346.0, 1625.5], [344.0, 1336.75], [340.0, 1254.5], [341.0, 1702.0], [338.0, 1530.0], [336.0, 1958.3333333333333], [339.0, 2091.0], [342.0, 1819.0], [366.0, 1678.0], [367.0, 1928.0], [365.0, 1412.5], [364.0, 2030.0], [363.0, 1728.3333333333333], [362.0, 1670.0], [361.0, 1687.0], [359.0, 2961.6], [357.0, 2206.0], [356.0, 1957.0], [358.0, 1966.0], [355.0, 1909.8], [354.0, 4369.0], [353.0, 1195.0], [352.0, 2674.6666666666665], [380.0, 3334.5], [379.0, 2128.8333333333335], [378.0, 1347.0], [377.0, 1898.75], [376.0, 2024.5], [372.0, 1825.0], [370.0, 1502.0], [369.0, 1547.0], [368.0, 1756.0], [383.0, 2027.0], [382.0, 1984.0], [381.0, 2222.0], [396.0, 1307.0], [392.0, 1618.3333333333333], [393.0, 1703.0], [391.0, 1540.75], [384.0, 2017.0], [387.0, 2013.0], [385.0, 1834.0], [395.0, 1625.5], [398.0, 1812.0], [397.0, 1867.0], [394.0, 1957.0], [390.0, 1691.0], [389.0, 2206.0], [388.0, 2034.0], [402.0, 1390.0], [401.0, 1453.0], [400.0, 1460.0], [1.0, 4859.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[201.79624999999996, 1950.202500000001]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 402.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4293.333333333333, "minX": 1.65943938E12, "maxY": 6240.0, "series": [{"data": [[1.65943938E12, 6240.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65943938E12, 4293.333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65943938E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1950.202500000001, "minX": 1.65943938E12, "maxY": 1950.202500000001, "series": [{"data": [[1.65943938E12, 1950.202500000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65943938E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1950.152499999999, "minX": 1.65943938E12, "maxY": 1950.152499999999, "series": [{"data": [[1.65943938E12, 1950.152499999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65943938E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1268.8737499999984, "minX": 1.65943938E12, "maxY": 1268.8737499999984, "series": [{"data": [[1.65943938E12, 1268.8737499999984]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65943938E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 514.0, "minX": 1.65943938E12, "maxY": 6693.0, "series": [{"data": [[1.65943938E12, 6693.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65943938E12, 2956.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65943938E12, 4381.87]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65943938E12, 3256.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65943938E12, 514.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65943938E12, 1889.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65943938E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1114.5, "minX": 1.0, "maxY": 4859.0, "series": [{"data": [[1.0, 4859.0], [75.0, 1477.0], [19.0, 2301.0], [164.0, 2124.0], [163.0, 2786.0], [366.0, 1816.0], [12.0, 1114.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 366.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1114.5, "minX": 1.0, "maxY": 4859.0, "series": [{"data": [[1.0, 4859.0], [75.0, 1477.0], [19.0, 2301.0], [164.0, 2124.0], [163.0, 2786.0], [366.0, 1816.0], [12.0, 1114.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 366.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 13.333333333333334, "minX": 1.65943938E12, "maxY": 13.333333333333334, "series": [{"data": [[1.65943938E12, 13.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65943938E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 13.333333333333334, "minX": 1.65943938E12, "maxY": 13.333333333333334, "series": [{"data": [[1.65943938E12, 13.333333333333334]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65943938E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 13.333333333333334, "minX": 1.65943938E12, "maxY": 13.333333333333334, "series": [{"data": [[1.65943938E12, 13.333333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65943938E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 13.333333333333334, "minX": 1.65943938E12, "maxY": 13.333333333333334, "series": [{"data": [[1.65943938E12, 13.333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65943938E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

