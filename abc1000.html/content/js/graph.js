/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 397.0, "minX": 0.0, "maxY": 6536.0, "series": [{"data": [[0.0, 397.0], [0.1, 400.0], [0.2, 400.0], [0.3, 400.0], [0.4, 401.0], [0.5, 401.0], [0.6, 401.0], [0.7, 402.0], [0.8, 403.0], [0.9, 403.0], [1.0, 404.0], [1.1, 404.0], [1.2, 404.0], [1.3, 405.0], [1.4, 405.0], [1.5, 405.0], [1.6, 406.0], [1.7, 406.0], [1.8, 407.0], [1.9, 407.0], [2.0, 408.0], [2.1, 408.0], [2.2, 408.0], [2.3, 409.0], [2.4, 410.0], [2.5, 410.0], [2.6, 411.0], [2.7, 413.0], [2.8, 413.0], [2.9, 414.0], [3.0, 415.0], [3.1, 416.0], [3.2, 416.0], [3.3, 418.0], [3.4, 419.0], [3.5, 420.0], [3.6, 420.0], [3.7, 420.0], [3.8, 421.0], [3.9, 421.0], [4.0, 421.0], [4.1, 421.0], [4.2, 423.0], [4.3, 423.0], [4.4, 423.0], [4.5, 423.0], [4.6, 423.0], [4.7, 424.0], [4.8, 424.0], [4.9, 425.0], [5.0, 425.0], [5.1, 426.0], [5.2, 426.0], [5.3, 426.0], [5.4, 426.0], [5.5, 426.0], [5.6, 426.0], [5.7, 426.0], [5.8, 427.0], [5.9, 427.0], [6.0, 428.0], [6.1, 428.0], [6.2, 428.0], [6.3, 428.0], [6.4, 430.0], [6.5, 430.0], [6.6, 431.0], [6.7, 432.0], [6.8, 432.0], [6.9, 432.0], [7.0, 433.0], [7.1, 434.0], [7.2, 434.0], [7.3, 434.0], [7.4, 437.0], [7.5, 437.0], [7.6, 437.0], [7.7, 437.0], [7.8, 437.0], [7.9, 438.0], [8.0, 439.0], [8.1, 439.0], [8.2, 439.0], [8.3, 442.0], [8.4, 442.0], [8.5, 443.0], [8.6, 444.0], [8.7, 445.0], [8.8, 446.0], [8.9, 446.0], [9.0, 446.0], [9.1, 449.0], [9.2, 451.0], [9.3, 451.0], [9.4, 451.0], [9.5, 453.0], [9.6, 454.0], [9.7, 458.0], [9.8, 460.0], [9.9, 461.0], [10.0, 461.0], [10.1, 463.0], [10.2, 464.0], [10.3, 467.0], [10.4, 469.0], [10.5, 469.0], [10.6, 475.0], [10.7, 486.0], [10.8, 494.0], [10.9, 504.0], [11.0, 511.0], [11.1, 519.0], [11.2, 523.0], [11.3, 525.0], [11.4, 532.0], [11.5, 672.0], [11.6, 687.0], [11.7, 689.0], [11.8, 707.0], [11.9, 712.0], [12.0, 720.0], [12.1, 767.0], [12.2, 771.0], [12.3, 790.0], [12.4, 793.0], [12.5, 798.0], [12.6, 799.0], [12.7, 800.0], [12.8, 800.0], [12.9, 802.0], [13.0, 803.0], [13.1, 804.0], [13.2, 806.0], [13.3, 808.0], [13.4, 810.0], [13.5, 824.0], [13.6, 825.0], [13.7, 828.0], [13.8, 832.0], [13.9, 834.0], [14.0, 839.0], [14.1, 841.0], [14.2, 846.0], [14.3, 846.0], [14.4, 847.0], [14.5, 847.0], [14.6, 848.0], [14.7, 848.0], [14.8, 851.0], [14.9, 853.0], [15.0, 853.0], [15.1, 853.0], [15.2, 855.0], [15.3, 856.0], [15.4, 856.0], [15.5, 857.0], [15.6, 857.0], [15.7, 858.0], [15.8, 861.0], [15.9, 861.0], [16.0, 862.0], [16.1, 864.0], [16.2, 867.0], [16.3, 867.0], [16.4, 868.0], [16.5, 869.0], [16.6, 869.0], [16.7, 869.0], [16.8, 870.0], [16.9, 871.0], [17.0, 872.0], [17.1, 872.0], [17.2, 873.0], [17.3, 873.0], [17.4, 874.0], [17.5, 874.0], [17.6, 876.0], [17.7, 876.0], [17.8, 877.0], [17.9, 878.0], [18.0, 878.0], [18.1, 880.0], [18.2, 881.0], [18.3, 881.0], [18.4, 882.0], [18.5, 883.0], [18.6, 887.0], [18.7, 887.0], [18.8, 887.0], [18.9, 888.0], [19.0, 889.0], [19.1, 889.0], [19.2, 889.0], [19.3, 889.0], [19.4, 890.0], [19.5, 891.0], [19.6, 892.0], [19.7, 893.0], [19.8, 896.0], [19.9, 896.0], [20.0, 897.0], [20.1, 898.0], [20.2, 899.0], [20.3, 901.0], [20.4, 902.0], [20.5, 904.0], [20.6, 904.0], [20.7, 904.0], [20.8, 906.0], [20.9, 906.0], [21.0, 907.0], [21.1, 909.0], [21.2, 909.0], [21.3, 910.0], [21.4, 910.0], [21.5, 911.0], [21.6, 913.0], [21.7, 913.0], [21.8, 914.0], [21.9, 915.0], [22.0, 915.0], [22.1, 919.0], [22.2, 919.0], [22.3, 919.0], [22.4, 920.0], [22.5, 922.0], [22.6, 923.0], [22.7, 924.0], [22.8, 927.0], [22.9, 927.0], [23.0, 933.0], [23.1, 933.0], [23.2, 934.0], [23.3, 936.0], [23.4, 936.0], [23.5, 938.0], [23.6, 949.0], [23.7, 950.0], [23.8, 951.0], [23.9, 952.0], [24.0, 952.0], [24.1, 955.0], [24.2, 956.0], [24.3, 956.0], [24.4, 957.0], [24.5, 957.0], [24.6, 958.0], [24.7, 958.0], [24.8, 959.0], [24.9, 960.0], [25.0, 961.0], [25.1, 962.0], [25.2, 964.0], [25.3, 964.0], [25.4, 964.0], [25.5, 965.0], [25.6, 968.0], [25.7, 968.0], [25.8, 969.0], [25.9, 969.0], [26.0, 971.0], [26.1, 972.0], [26.2, 972.0], [26.3, 973.0], [26.4, 974.0], [26.5, 975.0], [26.6, 977.0], [26.7, 977.0], [26.8, 977.0], [26.9, 981.0], [27.0, 982.0], [27.1, 986.0], [27.2, 989.0], [27.3, 990.0], [27.4, 992.0], [27.5, 994.0], [27.6, 994.0], [27.7, 997.0], [27.8, 997.0], [27.9, 999.0], [28.0, 999.0], [28.1, 1000.0], [28.2, 1002.0], [28.3, 1003.0], [28.4, 1006.0], [28.5, 1006.0], [28.6, 1007.0], [28.7, 1007.0], [28.8, 1007.0], [28.9, 1007.0], [29.0, 1012.0], [29.1, 1013.0], [29.2, 1014.0], [29.3, 1014.0], [29.4, 1015.0], [29.5, 1016.0], [29.6, 1016.0], [29.7, 1017.0], [29.8, 1017.0], [29.9, 1018.0], [30.0, 1018.0], [30.1, 1019.0], [30.2, 1020.0], [30.3, 1020.0], [30.4, 1021.0], [30.5, 1023.0], [30.6, 1023.0], [30.7, 1024.0], [30.8, 1024.0], [30.9, 1025.0], [31.0, 1026.0], [31.1, 1027.0], [31.2, 1028.0], [31.3, 1029.0], [31.4, 1029.0], [31.5, 1029.0], [31.6, 1030.0], [31.7, 1030.0], [31.8, 1030.0], [31.9, 1031.0], [32.0, 1032.0], [32.1, 1032.0], [32.2, 1032.0], [32.3, 1033.0], [32.4, 1033.0], [32.5, 1034.0], [32.6, 1035.0], [32.7, 1035.0], [32.8, 1036.0], [32.9, 1037.0], [33.0, 1037.0], [33.1, 1038.0], [33.2, 1039.0], [33.3, 1039.0], [33.4, 1040.0], [33.5, 1041.0], [33.6, 1043.0], [33.7, 1044.0], [33.8, 1044.0], [33.9, 1044.0], [34.0, 1044.0], [34.1, 1044.0], [34.2, 1045.0], [34.3, 1045.0], [34.4, 1046.0], [34.5, 1046.0], [34.6, 1046.0], [34.7, 1047.0], [34.8, 1047.0], [34.9, 1047.0], [35.0, 1048.0], [35.1, 1048.0], [35.2, 1049.0], [35.3, 1050.0], [35.4, 1051.0], [35.5, 1051.0], [35.6, 1054.0], [35.7, 1054.0], [35.8, 1055.0], [35.9, 1057.0], [36.0, 1057.0], [36.1, 1057.0], [36.2, 1057.0], [36.3, 1058.0], [36.4, 1058.0], [36.5, 1058.0], [36.6, 1059.0], [36.7, 1062.0], [36.8, 1064.0], [36.9, 1065.0], [37.0, 1068.0], [37.1, 1070.0], [37.2, 1070.0], [37.3, 1070.0], [37.4, 1070.0], [37.5, 1070.0], [37.6, 1071.0], [37.7, 1071.0], [37.8, 1071.0], [37.9, 1072.0], [38.0, 1073.0], [38.1, 1074.0], [38.2, 1074.0], [38.3, 1074.0], [38.4, 1074.0], [38.5, 1075.0], [38.6, 1075.0], [38.7, 1075.0], [38.8, 1076.0], [38.9, 1078.0], [39.0, 1079.0], [39.1, 1079.0], [39.2, 1079.0], [39.3, 1080.0], [39.4, 1080.0], [39.5, 1082.0], [39.6, 1082.0], [39.7, 1082.0], [39.8, 1082.0], [39.9, 1082.0], [40.0, 1082.0], [40.1, 1083.0], [40.2, 1084.0], [40.3, 1085.0], [40.4, 1085.0], [40.5, 1085.0], [40.6, 1085.0], [40.7, 1086.0], [40.8, 1087.0], [40.9, 1088.0], [41.0, 1088.0], [41.1, 1088.0], [41.2, 1088.0], [41.3, 1089.0], [41.4, 1089.0], [41.5, 1089.0], [41.6, 1089.0], [41.7, 1089.0], [41.8, 1090.0], [41.9, 1090.0], [42.0, 1090.0], [42.1, 1090.0], [42.2, 1091.0], [42.3, 1091.0], [42.4, 1091.0], [42.5, 1091.0], [42.6, 1091.0], [42.7, 1091.0], [42.8, 1091.0], [42.9, 1091.0], [43.0, 1092.0], [43.1, 1092.0], [43.2, 1092.0], [43.3, 1092.0], [43.4, 1092.0], [43.5, 1093.0], [43.6, 1093.0], [43.7, 1093.0], [43.8, 1094.0], [43.9, 1094.0], [44.0, 1095.0], [44.1, 1095.0], [44.2, 1095.0], [44.3, 1096.0], [44.4, 1097.0], [44.5, 1097.0], [44.6, 1098.0], [44.7, 1098.0], [44.8, 1098.0], [44.9, 1098.0], [45.0, 1098.0], [45.1, 1098.0], [45.2, 1099.0], [45.3, 1099.0], [45.4, 1099.0], [45.5, 1099.0], [45.6, 1100.0], [45.7, 1101.0], [45.8, 1101.0], [45.9, 1101.0], [46.0, 1101.0], [46.1, 1101.0], [46.2, 1101.0], [46.3, 1101.0], [46.4, 1102.0], [46.5, 1102.0], [46.6, 1102.0], [46.7, 1102.0], [46.8, 1102.0], [46.9, 1102.0], [47.0, 1102.0], [47.1, 1102.0], [47.2, 1103.0], [47.3, 1103.0], [47.4, 1103.0], [47.5, 1103.0], [47.6, 1103.0], [47.7, 1103.0], [47.8, 1103.0], [47.9, 1104.0], [48.0, 1104.0], [48.1, 1104.0], [48.2, 1105.0], [48.3, 1105.0], [48.4, 1105.0], [48.5, 1105.0], [48.6, 1105.0], [48.7, 1105.0], [48.8, 1106.0], [48.9, 1106.0], [49.0, 1106.0], [49.1, 1106.0], [49.2, 1106.0], [49.3, 1106.0], [49.4, 1106.0], [49.5, 1106.0], [49.6, 1107.0], [49.7, 1107.0], [49.8, 1107.0], [49.9, 1107.0], [50.0, 1107.0], [50.1, 1108.0], [50.2, 1108.0], [50.3, 1108.0], [50.4, 1108.0], [50.5, 1108.0], [50.6, 1108.0], [50.7, 1109.0], [50.8, 1110.0], [50.9, 1111.0], [51.0, 1112.0], [51.1, 1112.0], [51.2, 1112.0], [51.3, 1112.0], [51.4, 1112.0], [51.5, 1112.0], [51.6, 1112.0], [51.7, 1112.0], [51.8, 1112.0], [51.9, 1113.0], [52.0, 1113.0], [52.1, 1113.0], [52.2, 1114.0], [52.3, 1115.0], [52.4, 1115.0], [52.5, 1116.0], [52.6, 1116.0], [52.7, 1117.0], [52.8, 1118.0], [52.9, 1118.0], [53.0, 1118.0], [53.1, 1118.0], [53.2, 1119.0], [53.3, 1122.0], [53.4, 1122.0], [53.5, 1123.0], [53.6, 1123.0], [53.7, 1123.0], [53.8, 1123.0], [53.9, 1123.0], [54.0, 1123.0], [54.1, 1123.0], [54.2, 1124.0], [54.3, 1124.0], [54.4, 1124.0], [54.5, 1124.0], [54.6, 1124.0], [54.7, 1125.0], [54.8, 1125.0], [54.9, 1126.0], [55.0, 1126.0], [55.1, 1126.0], [55.2, 1126.0], [55.3, 1127.0], [55.4, 1127.0], [55.5, 1127.0], [55.6, 1127.0], [55.7, 1127.0], [55.8, 1127.0], [55.9, 1127.0], [56.0, 1128.0], [56.1, 1128.0], [56.2, 1129.0], [56.3, 1129.0], [56.4, 1129.0], [56.5, 1129.0], [56.6, 1130.0], [56.7, 1130.0], [56.8, 1130.0], [56.9, 1130.0], [57.0, 1131.0], [57.1, 1131.0], [57.2, 1131.0], [57.3, 1131.0], [57.4, 1131.0], [57.5, 1132.0], [57.6, 1132.0], [57.7, 1132.0], [57.8, 1132.0], [57.9, 1132.0], [58.0, 1133.0], [58.1, 1133.0], [58.2, 1133.0], [58.3, 1133.0], [58.4, 1133.0], [58.5, 1133.0], [58.6, 1133.0], [58.7, 1134.0], [58.8, 1134.0], [58.9, 1134.0], [59.0, 1135.0], [59.1, 1135.0], [59.2, 1135.0], [59.3, 1136.0], [59.4, 1136.0], [59.5, 1136.0], [59.6, 1137.0], [59.7, 1138.0], [59.8, 1138.0], [59.9, 1138.0], [60.0, 1138.0], [60.1, 1139.0], [60.2, 1139.0], [60.3, 1139.0], [60.4, 1141.0], [60.5, 1141.0], [60.6, 1141.0], [60.7, 1141.0], [60.8, 1142.0], [60.9, 1142.0], [61.0, 1142.0], [61.1, 1143.0], [61.2, 1143.0], [61.3, 1144.0], [61.4, 1144.0], [61.5, 1144.0], [61.6, 1145.0], [61.7, 1145.0], [61.8, 1145.0], [61.9, 1145.0], [62.0, 1146.0], [62.1, 1147.0], [62.2, 1148.0], [62.3, 1148.0], [62.4, 1148.0], [62.5, 1149.0], [62.6, 1149.0], [62.7, 1149.0], [62.8, 1149.0], [62.9, 1150.0], [63.0, 1150.0], [63.1, 1150.0], [63.2, 1150.0], [63.3, 1151.0], [63.4, 1151.0], [63.5, 1151.0], [63.6, 1151.0], [63.7, 1152.0], [63.8, 1153.0], [63.9, 1153.0], [64.0, 1153.0], [64.1, 1154.0], [64.2, 1154.0], [64.3, 1154.0], [64.4, 1154.0], [64.5, 1154.0], [64.6, 1155.0], [64.7, 1155.0], [64.8, 1155.0], [64.9, 1155.0], [65.0, 1156.0], [65.1, 1156.0], [65.2, 1156.0], [65.3, 1156.0], [65.4, 1157.0], [65.5, 1157.0], [65.6, 1158.0], [65.7, 1158.0], [65.8, 1158.0], [65.9, 1158.0], [66.0, 1159.0], [66.1, 1160.0], [66.2, 1160.0], [66.3, 1161.0], [66.4, 1161.0], [66.5, 1161.0], [66.6, 1162.0], [66.7, 1163.0], [66.8, 1166.0], [66.9, 1167.0], [67.0, 1167.0], [67.1, 1167.0], [67.2, 1168.0], [67.3, 1169.0], [67.4, 1169.0], [67.5, 1169.0], [67.6, 1169.0], [67.7, 1170.0], [67.8, 1170.0], [67.9, 1170.0], [68.0, 1171.0], [68.1, 1171.0], [68.2, 1171.0], [68.3, 1171.0], [68.4, 1172.0], [68.5, 1173.0], [68.6, 1173.0], [68.7, 1174.0], [68.8, 1174.0], [68.9, 1174.0], [69.0, 1174.0], [69.1, 1175.0], [69.2, 1176.0], [69.3, 1176.0], [69.4, 1176.0], [69.5, 1177.0], [69.6, 1177.0], [69.7, 1178.0], [69.8, 1178.0], [69.9, 1178.0], [70.0, 1179.0], [70.1, 1179.0], [70.2, 1179.0], [70.3, 1181.0], [70.4, 1182.0], [70.5, 1183.0], [70.6, 1183.0], [70.7, 1184.0], [70.8, 1184.0], [70.9, 1185.0], [71.0, 1187.0], [71.1, 1187.0], [71.2, 1187.0], [71.3, 1190.0], [71.4, 1191.0], [71.5, 1191.0], [71.6, 1192.0], [71.7, 1197.0], [71.8, 1198.0], [71.9, 1198.0], [72.0, 1198.0], [72.1, 1201.0], [72.2, 1203.0], [72.3, 1204.0], [72.4, 1204.0], [72.5, 1205.0], [72.6, 1209.0], [72.7, 1211.0], [72.8, 1211.0], [72.9, 1211.0], [73.0, 1216.0], [73.1, 1218.0], [73.2, 1225.0], [73.3, 1226.0], [73.4, 1228.0], [73.5, 1230.0], [73.6, 1234.0], [73.7, 1235.0], [73.8, 1235.0], [73.9, 1245.0], [74.0, 1265.0], [74.1, 1287.0], [74.2, 1299.0], [74.3, 1302.0], [74.4, 1357.0], [74.5, 1359.0], [74.6, 1361.0], [74.7, 1370.0], [74.8, 1373.0], [74.9, 1374.0], [75.0, 1376.0], [75.1, 1381.0], [75.2, 1386.0], [75.3, 1388.0], [75.4, 1399.0], [75.5, 1401.0], [75.6, 1409.0], [75.7, 1414.0], [75.8, 1414.0], [75.9, 1416.0], [76.0, 1423.0], [76.1, 1424.0], [76.2, 1427.0], [76.3, 1431.0], [76.4, 1432.0], [76.5, 1435.0], [76.6, 1440.0], [76.7, 1441.0], [76.8, 1441.0], [76.9, 1443.0], [77.0, 1451.0], [77.1, 1455.0], [77.2, 1459.0], [77.3, 1463.0], [77.4, 1478.0], [77.5, 1479.0], [77.6, 1482.0], [77.7, 1488.0], [77.8, 1491.0], [77.9, 1491.0], [78.0, 1494.0], [78.1, 1495.0], [78.2, 1498.0], [78.3, 1500.0], [78.4, 1502.0], [78.5, 1512.0], [78.6, 1515.0], [78.7, 1520.0], [78.8, 1521.0], [78.9, 1521.0], [79.0, 1522.0], [79.1, 1525.0], [79.2, 1530.0], [79.3, 1531.0], [79.4, 1534.0], [79.5, 1542.0], [79.6, 1543.0], [79.7, 1549.0], [79.8, 1551.0], [79.9, 1562.0], [80.0, 1566.0], [80.1, 1567.0], [80.2, 1576.0], [80.3, 1578.0], [80.4, 1578.0], [80.5, 1590.0], [80.6, 1597.0], [80.7, 1599.0], [80.8, 1600.0], [80.9, 1601.0], [81.0, 1604.0], [81.1, 1607.0], [81.2, 1610.0], [81.3, 1610.0], [81.4, 1610.0], [81.5, 1611.0], [81.6, 1614.0], [81.7, 1625.0], [81.8, 1627.0], [81.9, 1630.0], [82.0, 1632.0], [82.1, 1633.0], [82.2, 1634.0], [82.3, 1647.0], [82.4, 1652.0], [82.5, 1654.0], [82.6, 1656.0], [82.7, 1665.0], [82.8, 1667.0], [82.9, 1682.0], [83.0, 1684.0], [83.1, 1688.0], [83.2, 1690.0], [83.3, 1693.0], [83.4, 1703.0], [83.5, 1704.0], [83.6, 1715.0], [83.7, 1717.0], [83.8, 1719.0], [83.9, 1722.0], [84.0, 1731.0], [84.1, 1734.0], [84.2, 1735.0], [84.3, 1736.0], [84.4, 1738.0], [84.5, 1739.0], [84.6, 1743.0], [84.7, 1747.0], [84.8, 1750.0], [84.9, 1750.0], [85.0, 1752.0], [85.1, 1753.0], [85.2, 1754.0], [85.3, 1754.0], [85.4, 1756.0], [85.5, 1759.0], [85.6, 1764.0], [85.7, 1768.0], [85.8, 1772.0], [85.9, 1777.0], [86.0, 1777.0], [86.1, 1778.0], [86.2, 1781.0], [86.3, 1782.0], [86.4, 1785.0], [86.5, 1785.0], [86.6, 1785.0], [86.7, 1787.0], [86.8, 1790.0], [86.9, 1791.0], [87.0, 1793.0], [87.1, 1795.0], [87.2, 1799.0], [87.3, 1802.0], [87.4, 1803.0], [87.5, 1805.0], [87.6, 1805.0], [87.7, 1806.0], [87.8, 1821.0], [87.9, 1823.0], [88.0, 1823.0], [88.1, 1826.0], [88.2, 1826.0], [88.3, 1827.0], [88.4, 1831.0], [88.5, 1833.0], [88.6, 1834.0], [88.7, 1836.0], [88.8, 1838.0], [88.9, 1839.0], [89.0, 1841.0], [89.1, 1844.0], [89.2, 1845.0], [89.3, 1847.0], [89.4, 1847.0], [89.5, 1848.0], [89.6, 1851.0], [89.7, 1852.0], [89.8, 1852.0], [89.9, 1852.0], [90.0, 1854.0], [90.1, 1856.0], [90.2, 1858.0], [90.3, 1860.0], [90.4, 1861.0], [90.5, 1862.0], [90.6, 1862.0], [90.7, 1864.0], [90.8, 1866.0], [90.9, 1867.0], [91.0, 1869.0], [91.1, 1871.0], [91.2, 1872.0], [91.3, 1872.0], [91.4, 1879.0], [91.5, 1879.0], [91.6, 1882.0], [91.7, 1885.0], [91.8, 1886.0], [91.9, 1886.0], [92.0, 1887.0], [92.1, 1887.0], [92.2, 1888.0], [92.3, 1889.0], [92.4, 1889.0], [92.5, 1890.0], [92.6, 1890.0], [92.7, 1892.0], [92.8, 1897.0], [92.9, 1900.0], [93.0, 1911.0], [93.1, 1926.0], [93.2, 1946.0], [93.3, 1951.0], [93.4, 1963.0], [93.5, 1965.0], [93.6, 1971.0], [93.7, 1975.0], [93.8, 1977.0], [93.9, 1978.0], [94.0, 1981.0], [94.1, 1981.0], [94.2, 1981.0], [94.3, 1982.0], [94.4, 1987.0], [94.5, 1988.0], [94.6, 1991.0], [94.7, 1995.0], [94.8, 2013.0], [94.9, 2020.0], [95.0, 2022.0], [95.1, 2049.0], [95.2, 2063.0], [95.3, 2063.0], [95.4, 2109.0], [95.5, 2116.0], [95.6, 2161.0], [95.7, 2191.0], [95.8, 2205.0], [95.9, 2222.0], [96.0, 2228.0], [96.1, 2234.0], [96.2, 2244.0], [96.3, 2267.0], [96.4, 2270.0], [96.5, 2276.0], [96.6, 2296.0], [96.7, 2314.0], [96.8, 2316.0], [96.9, 2379.0], [97.0, 2408.0], [97.1, 2422.0], [97.2, 2439.0], [97.3, 2453.0], [97.4, 2515.0], [97.5, 2572.0], [97.6, 2576.0], [97.7, 2614.0], [97.8, 2664.0], [97.9, 2665.0], [98.0, 3393.0], [98.1, 3404.0], [98.2, 3433.0], [98.3, 3445.0], [98.4, 3447.0], [98.5, 3449.0], [98.6, 3503.0], [98.7, 3529.0], [98.8, 3540.0], [98.9, 3545.0], [99.0, 3553.0], [99.1, 3555.0], [99.2, 3557.0], [99.3, 3559.0], [99.4, 3565.0], [99.5, 3568.0], [99.6, 3570.0], [99.7, 3572.0], [99.8, 3981.0], [99.9, 6536.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 265.0, "series": [{"data": [[600.0, 3.0], [700.0, 9.0], [800.0, 76.0], [900.0, 77.0], [1000.0, 175.0], [1100.0, 265.0], [1200.0, 23.0], [1300.0, 12.0], [1400.0, 28.0], [1500.0, 25.0], [1600.0, 26.0], [1700.0, 39.0], [1800.0, 56.0], [1900.0, 19.0], [2000.0, 6.0], [2100.0, 4.0], [2200.0, 9.0], [2300.0, 3.0], [2400.0, 4.0], [2500.0, 3.0], [2600.0, 3.0], [3300.0, 1.0], [3400.0, 5.0], [3500.0, 12.0], [3900.0, 1.0], [300.0, 1.0], [400.0, 108.0], [6500.0, 1.0], [500.0, 6.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 109.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 675.0, "series": [{"data": [[0.0, 109.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 675.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 216.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 142.68127490039822, "minX": 1.65943956E12, "maxY": 177.5674232309746, "series": [{"data": [[1.65943962E12, 177.5674232309746], [1.65943956E12, 142.68127490039822]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65943962E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 413.0, "minX": 1.0, "maxY": 3445.0, "series": [{"data": [[2.0, 3404.0], [3.0, 3433.0], [4.0, 1443.0], [5.0, 919.0], [6.0, 924.0], [7.0, 920.0], [8.0, 892.0], [9.0, 883.0], [11.0, 733.6666666666666], [12.0, 1236.2], [13.0, 537.8], [14.0, 483.62499999999994], [15.0, 489.95238095238096], [16.0, 833.6842105263156], [17.0, 844.25], [18.0, 1466.5714285714287], [21.0, 892.0], [22.0, 922.0], [24.0, 886.5], [25.0, 2885.777777777778], [26.0, 887.0], [27.0, 881.0], [28.0, 944.1764705882351], [29.0, 863.6250000000001], [30.0, 2657.5], [33.0, 1842.2], [32.0, 902.5], [35.0, 1577.5], [34.0, 1817.6666666666667], [37.0, 1579.0], [36.0, 1689.0], [39.0, 1705.25], [38.0, 437.0], [41.0, 1403.0], [40.0, 2423.5], [43.0, 1457.0], [42.0, 1414.0], [45.0, 1471.8], [44.0, 438.0], [47.0, 1536.5], [46.0, 1226.3333333333333], [49.0, 1718.5], [48.0, 1184.0], [51.0, 2030.5], [53.0, 2022.0], [52.0, 1101.5], [54.0, 1318.6666666666667], [55.0, 1000.0], [57.0, 1973.0], [56.0, 1242.5], [59.0, 2091.3333333333335], [58.0, 912.0], [60.0, 1243.5], [61.0, 1090.0], [62.0, 896.0], [66.0, 867.75], [65.0, 1772.0], [64.0, 1727.25], [67.0, 932.0], [71.0, 1322.5], [70.0, 932.75], [69.0, 1440.0], [74.0, 869.0], [72.0, 1464.0], [75.0, 906.6666666666666], [79.0, 1241.0], [78.0, 690.0], [76.0, 1547.0], [77.0, 941.5], [82.0, 1441.75], [80.0, 1268.0], [83.0, 1013.0], [87.0, 414.0], [86.0, 962.5], [84.0, 938.0], [90.0, 1012.0], [89.0, 977.0], [88.0, 897.0], [94.0, 1734.0], [93.0, 1597.7857142857142], [99.0, 1446.4285714285713], [97.0, 982.5], [101.0, 1372.0], [102.0, 1059.5], [100.0, 1030.0], [104.0, 1517.2], [107.0, 413.0], [106.0, 1082.0], [110.0, 1097.6666666666667], [109.0, 1546.25], [111.0, 469.0], [108.0, 847.0], [112.0, 1089.5], [118.0, 1017.0], [123.0, 1083.6666666666667], [122.0, 1010.5], [121.0, 1099.0], [120.0, 1043.5], [127.0, 1887.0], [124.0, 1889.0], [125.0, 519.0], [126.0, 1127.5], [134.0, 1237.3333333333335], [133.0, 1384.875], [132.0, 1291.0], [129.0, 1271.0], [131.0, 963.5], [135.0, 1136.0], [128.0, 1112.0], [142.0, 1732.5], [140.0, 1677.5], [138.0, 1301.25], [137.0, 1730.75], [143.0, 1086.0], [141.0, 1127.0], [139.0, 1129.0], [136.0, 1127.0], [149.0, 1518.5], [147.0, 1738.3333333333333], [145.0, 1272.6666666666667], [144.0, 1835.0], [150.0, 1099.0], [148.0, 1103.0], [146.0, 1105.0], [158.0, 1648.0], [155.0, 1559.5], [154.0, 1381.4], [153.0, 1889.0], [152.0, 1493.5], [157.0, 1119.0], [166.0, 1245.6666666666665], [164.0, 1567.0], [163.0, 1233.6666666666667], [160.0, 1869.0], [167.0, 672.0], [165.0, 1119.5], [161.0, 1119.5], [175.0, 1628.0], [173.0, 1222.4444444444446], [169.0, 851.4], [168.0, 955.6], [174.0, 1072.3333333333333], [172.0, 1027.5], [171.0, 1059.6666666666667], [170.0, 948.5], [183.0, 1427.7777777777778], [178.0, 1071.75], [180.0, 1250.0], [176.0, 1177.888888888889], [181.0, 895.1666666666667], [179.0, 913.0], [177.0, 919.875], [182.0, 969.75], [191.0, 1853.6666666666667], [190.0, 1487.0], [189.0, 1565.25], [187.0, 1200.5], [186.0, 1211.2857142857142], [184.0, 1102.0], [185.0, 1011.8571428571429], [188.0, 1176.0], [199.0, 1415.6666666666667], [198.0, 1407.0], [195.0, 1663.5714285714287], [192.0, 1503.1666666666667], [197.0, 1139.0], [194.0, 1147.0], [207.0, 1273.0], [206.0, 1205.5], [204.0, 1261.5], [203.0, 1541.3333333333333], [202.0, 1386.4], [200.0, 1152.5], [205.0, 1157.0], [201.0, 1149.0], [215.0, 1595.5], [213.0, 1821.0], [212.0, 1246.2222222222222], [210.0, 1226.8181818181815], [209.0, 1281.6666666666667], [208.0, 1144.2666666666664], [211.0, 1159.5], [214.0, 1132.3333333333333], [223.0, 1599.0], [221.0, 1278.0], [220.0, 1316.6666666666667], [219.0, 1303.0], [218.0, 1227.8], [217.0, 1453.0], [216.0, 1296.3333333333333], [222.0, 1166.5], [231.0, 1235.0], [230.0, 1142.5], [228.0, 1157.0], [227.0, 1149.5], [224.0, 1138.5], [232.0, 1474.0], [238.0, 1073.3333333333333], [237.0, 1107.5], [235.0, 1044.0], [234.0, 1116.0], [247.0, 1045.5], [245.0, 1087.0], [241.0, 1153.0], [240.0, 1016.25], [243.0, 1128.375], [246.0, 1161.5], [244.0, 1131.0], [255.0, 1204.5], [253.0, 1209.0], [252.0, 1133.0], [251.0, 1173.0], [250.0, 1223.5], [248.0, 1229.5], [268.0, 1112.3333333333333], [259.0, 1573.3243243243246], [258.0, 1185.0], [256.0, 1211.0], [264.0, 1121.0], [271.0, 1106.0], [270.0, 1124.6666666666667], [267.0, 1142.0], [265.0, 1155.0], [262.0, 1178.0], [261.0, 1191.0], [260.0, 1187.0], [279.0, 1110.6666666666667], [277.0, 1117.75], [278.0, 1381.0], [276.0, 1110.857142857143], [286.0, 1087.25], [285.0, 1081.25], [283.0, 1178.3333333333333], [284.0, 1026.0], [275.0, 1133.0], [272.0, 1139.0], [281.0, 1132.3333333333333], [280.0, 1131.0], [288.0, 1067.8], [290.0, 1068.5], [301.0, 1155.0], [299.0, 1122.0], [295.0, 1112.5], [293.0, 1155.0], [291.0, 1161.3333333333333], [319.0, 1113.8], [305.0, 1047.0], [311.0, 1102.0], [312.0, 1111.25], [313.0, 1187.0], [318.0, 1162.6000000000001], [317.0, 1030.0], [316.0, 1174.0], [306.0, 1153.6], [315.0, 1070.6666666666667], [314.0, 1088.5], [310.0, 1070.0], [309.0, 1179.3333333333333], [335.0, 1111.2], [322.0, 1086.25], [321.0, 1109.0], [320.0, 1198.0], [329.0, 1087.6666666666667], [328.0, 1094.0], [334.0, 1109.0], [332.0, 1103.25], [323.0, 1170.0], [330.0, 1100.8333333333333], [331.0, 1089.0], [327.0, 1103.6666666666667], [326.0, 1106.0], [325.0, 1122.0], [324.0, 1154.0], [348.0, 1113.571428571429], [342.0, 1113.125], [338.0, 1110.0], [340.0, 1104.0], [346.0, 1125.2], [347.0, 1127.0], [345.0, 1100.8], [349.0, 1096.4], [343.0, 1048.0], [337.0, 1082.0], [336.0, 1113.0], [341.0, 1078.75], [339.0, 1215.6666666666667], [1.0, 3445.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[168.80900000000005, 1207.652000000001]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 349.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1347.0333333333333, "minX": 1.65943956E12, "maxY": 5842.2, "series": [{"data": [[1.65943962E12, 5842.2], [1.65943956E12, 1957.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65943962E12, 4019.633333333333], [1.65943956E12, 1347.0333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65943962E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1046.548731642189, "minX": 1.65943956E12, "maxY": 1688.394422310757, "series": [{"data": [[1.65943962E12, 1046.548731642189], [1.65943956E12, 1688.394422310757]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65943962E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1046.5100133511348, "minX": 1.65943956E12, "maxY": 1686.6852589641435, "series": [{"data": [[1.65943962E12, 1046.5100133511348], [1.65943956E12, 1686.6852589641435]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65943962E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 885.9399198931908, "minX": 1.65943956E12, "maxY": 1523.1394422310752, "series": [{"data": [[1.65943962E12, 885.9399198931908], [1.65943956E12, 1523.1394422310752]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65943962E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 397.0, "minX": 1.65943956E12, "maxY": 6536.0, "series": [{"data": [[1.65943962E12, 6536.0], [1.65943956E12, 2665.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65943962E12, 1178.0], [1.65943956E12, 2114.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65943962E12, 3558.0], [1.65943956E12, 2637.9999999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65943962E12, 1234.5], [1.65943956E12, 2314.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65943962E12, 397.0], [1.65943956E12, 409.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65943962E12, 1082.0], [1.65943956E12, 1756.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65943962E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 425.0, "minX": 1.0, "maxY": 3433.0, "series": [{"data": [[32.0, 907.5], [1.0, 3433.0], [2.0, 3424.5], [37.0, 453.0], [152.0, 1091.0], [44.0, 1621.5], [89.0, 873.0], [353.0, 1123.0], [24.0, 428.0], [207.0, 1803.0], [29.0, 425.0], [30.0, 425.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 353.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 425.0, "minX": 1.0, "maxY": 3433.0, "series": [{"data": [[32.0, 907.5], [1.0, 3433.0], [2.0, 3424.5], [37.0, 453.0], [152.0, 1091.0], [44.0, 1621.5], [89.0, 873.0], [353.0, 1123.0], [24.0, 428.0], [207.0, 1803.0], [29.0, 425.0], [30.0, 425.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 353.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.633333333333334, "minX": 1.65943956E12, "maxY": 12.033333333333333, "series": [{"data": [[1.65943962E12, 12.033333333333333], [1.65943956E12, 4.633333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65943962E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.183333333333334, "minX": 1.65943956E12, "maxY": 12.483333333333333, "series": [{"data": [[1.65943962E12, 12.483333333333333], [1.65943956E12, 4.183333333333334]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65943962E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.183333333333334, "minX": 1.65943956E12, "maxY": 12.483333333333333, "series": [{"data": [[1.65943962E12, 12.483333333333333], [1.65943956E12, 4.183333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65943962E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.183333333333334, "minX": 1.65943956E12, "maxY": 12.483333333333333, "series": [{"data": [[1.65943962E12, 12.483333333333333], [1.65943956E12, 4.183333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65943962E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

